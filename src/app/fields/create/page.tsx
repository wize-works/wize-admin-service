import { FetchFieldNames } from "../../service-clients/wize-database-service-client";
import { FetchFieldNames as FetchFieldNamesFromApi } from "../../service-clients/wize-api-service-client";
import { FetchApiKey } from "../../service-clients/wize-database-service-client";
import { getSelectedClientFromCookies } from "@/context/clientActions";
import { redirect } from "next/navigation";
import NavigateBackButton from '@/app/components/NavigateBackButton';

type SearchParams = {
  db: string;
  table: string;
};

export default async function CreatePage({ searchParams }: { searchParams: SearchParams }) {
  const { db, table } = searchParams;
  
  // Get the selected client from cookies
  const selectedClient = await getSelectedClientFromCookies();
  
  // Check if user is logged in
  if (!selectedClient) {
    // No client selected - redirect to databases page
    redirect('/databases');
  }
  
  // Continue with create functionality
  let fieldInfo;
  try {
    if (selectedClient.value === '0') {
      // Admin user - use database service
      fieldInfo = await FetchFieldNames(db, table, '0');
      
    } else {
      // Regular user - use API service
      const apiKey = await FetchApiKey(selectedClient.value);
      if (!apiKey) {
        throw new Error("API key not found");
      }
      fieldInfo = await FetchFieldNamesFromApi(db, table, apiKey);
    }
    
    if (!fieldInfo || fieldInfo.length === 0) {
      throw new Error("Could not fetch field information");
    }
  } catch (error) {
    console.error("Error fetching field information:", error);
    return (
      <div className="p-5">
        <h1 className="text-2xl font-bold mb-4">Error</h1>
        <p>Failed to fetch field information for the table. There might be a permission issue.</p>
      </div>
    );
  }
  
  // Prepare form fields, excluding _id (will be generated by the database)
  const editableFields = fieldInfo.filter(field => field.name !== '_id');
  
  // Display the create record form
  return (
    <div className="p-5">
      <h1 className="text-2xl font-bold mb-4">Create New Record</h1>
      <div className="mb-4">
        <p><strong>Database:</strong> {db}</p>
        <p><strong>Table:</strong> {table}</p>
        <p><strong>Client:</strong> {selectedClient.label}</p>
      </div>
     
      <form 
        action={`/api/createRecord?redirect=/fields?db=${encodeURIComponent(db)}&table=${encodeURIComponent(table)}`} 
        method="POST" 
        className="space-y-6"
      >
        <input type="hidden" name="db" value={db} />
        <input type="hidden" name="table" value={table} />
        
        <div className="bg-base-100 shadow rounded-lg p-6">
          <div className="space-y-4">
            {editableFields.map((field) => (
              <div key={field.name} className="grid grid-cols-3 gap-4 items-center">
                <label htmlFor={field.name} className="font-medium col-span-1">{field.name}:</label>
                
                {/* Render different inputs based on field type */}
                {field.type.toLowerCase() === 'boolean' ? (
                  <select 
                    id={field.name}
                    name={field.name}
                    className="select select-bordered w-full col-span-2"
                  >
                    <option value="">-- Select --</option>
                    <option value="true">True</option>
                    <option value="false">False</option>
                  </select>
                ) : ['number', 'int', 'float', 'decimal'].includes(field.type.toLowerCase()) ? (
                  <input 
                    type="number"
                    id={field.name}
                    name={field.name}
                    className="input input-bordered w-full col-span-2"
                  />
                ) : ['object', 'json'].includes(field.type.toLowerCase()) ? (
                  <textarea
                    id={field.name}
                    name={field.name}
                    placeholder="{}"
                    rows={4}
                    className="textarea textarea-bordered w-full col-span-2 font-mono"
                  />
                ) : (
                  <input 
                    type="text"
                    id={field.name}
                    name={field.name}
                    className="input input-bordered w-full col-span-2"
                  />
                )}
              </div>
            ))}
          </div>
          
          <div className="flex justify-end mt-6 space-x-3">
            <button type="submit" className="btn btn-primary">Create Record</button>
            <NavigateBackButton />
          </div>
        </div>
      </form>
    </div>
  );
}
